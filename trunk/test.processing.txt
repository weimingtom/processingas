//*****************************************************************************
// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
c.size(200, 200);
c.smooth();
c.background(0);
c.strokeWeight(10);

for(var i = 0; i < c.width; i++) {
  var r = c.random(255);
  var x = c.random(0, c.width);
  c.stroke(r, 100);
  c.line(i, 0, x, c.height);
}
//*****************************************************************************

//*****************************************************************************
// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
c.setup = function () 
{
  c.size(200, 200); 
  c.noStroke();
  c.colorMode(c.RGB, 255, 255, 255, 100);
  c.rectMode(c.CENTER);
}

c.draw = function () 
{
  c.background(51); 
  c.fill(255, 80);
  c.rect(c.mouseX, height/2, c.mouseY/2+10, c.mouseY/2+10);
  c.fill(255, 80);
  c.rect(c.width-c.mouseX, c.height/2, ((c.height-c.mouseY)/2)+10, ((c.height-c.mouseY)/2)+10);
}
//*****************************************************************************

//*****************************************************************************
// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
var max_distance;

c.setup = function () {
  c.size(200, 200); 
  c.smooth();
  c.noStroke();
  max_distance = c.dist(0, 0, c.width, c.height);
}

c.draw = function() 
{
  c.background(51);

  for(var i = 0; i <= c.width; i += 20) {
    for(var j = 0; j <= c.width; j += 20) {
      var size = c.dist(c.mouseX, c.mouseY, i, j);
      size = size/max_distance * 66;
      c.ellipse(i, j, size, size);
    }
  }
}
//*****************************************************************************

//*****************************************************************************
// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
var e1, e2, e3, e4, e5;

c.setup = function () 
{
  c.size(200, 200);
  c.smooth();
  c.noStroke();
  e1 = new Eye( 50,  16,  80);
  e2 = new Eye( 64,  85,  40);  
  e3 = new Eye( 90, 200, 120);
  e4 = new Eye(150,  44,  40); 
  e5 = new Eye(175, 120,  80);
}

c.draw = function () 
{
  c.background(102);
  
  e1.update(c.mouseX, c.mouseY);
  e2.update(c.mouseX, c.mouseY);
  e3.update(c.mouseX, c.mouseY);
  e4.update(c.mouseX, c.mouseY);
  e5.update(c.mouseX, c.mouseY);

  e1.display();
  e2.display();
  e3.display();
  e4.display();
  e5.display();
}

function Eye(x, y, s)
{
  var ex, ey;
  var size;
  var angle = 0.0;
  
    ex = x;
    ey = y;
    size = s;

  this.update = function (mx, my) {
    angle = c.atan2(my-ey, mx-ex);
  }
  
  this.display = function () {
    c.pushMatrix();
    c.translate(ex, ey);
    c.fill(255);
    c.ellipse(0, 0, size, size);
    c.rotate(angle);
    c.fill(153);
    c.ellipse(size/4, 0, size/2, size/2);
    c.popMatrix();
  }
}
//*****************************************************************************

evaluator.evaluate(new Block(
	new Statement(evaluator.callMethod, ['size', [200, 200]]),
	new Statement(evaluator.callMethod, ['smooth']),
	new Statement(evaluator.callMethod, ['background', [0]]),
	new Statement(evaluator.callMethod, ['strokeWeight', [10]]),

	new Statement(evaluator.defineVar, [evaluator.INT, 'i']),
	new Statement(evaluator.setVar, ['i', 0]),
	new Statement(evaluator.loop, [
		new Statement(evaluator.expression, [new Statement(evaluator.getVar, ['i']), new Statement(evaluator.getVar, ['width']), evaluator.LT]),
		new Block(
			new Statement(evaluator.defineVar, [evaluator.FLOAT, 'r']),
			new Statement(evaluator.setVar, ['r', new Statement(evaluator.callMethod, ['random', [255]])]),
			new Statement(evaluator.defineVar, [evaluator.FLOAT, 'x']),
			new Statement(evaluator.setVar, ['x', new Statement(evaluator.callMethod, ['random', [0, new Statement(evaluator.getVar, ['width'])]])]),
			new Statement(evaluator.callMethod, ['stroke', [new Statement(evaluator.getVar, ['r']), 100]]),
			new Statement(evaluator.callMethod, ['line', [new Statement(evaluator.getVar, ['i']), 0, new Statement(evaluator.getVar, ['x']), new Statement(evaluator.getVar, ['height'])]]),
			new Statement(evaluator.setVar, ['i', new Statement(evaluator.expression, [new Statement(evaluator.getVar, ['i']), 1, evaluator.ADD])])
		)
	])
));
